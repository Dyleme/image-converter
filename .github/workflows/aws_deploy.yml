# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container #    in the `containerDefinitions` section of the task definition.  #
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

env:
  AWS_REGION: eu-central-1

  ECR_HANDLER_REPOSITORY: dziauho-image-handler
  ECR_CONV_REPOSITORY: dziauho-image-conv

  ECS_HANDLER_SERVICE: image-converter-handler
  ECS_CONV_SERVICE: image-converter-convert
  ECS_CLUSTER: dziauho-image-convesion

  ECS_HANDELR_TASK_DEFINITION: .aws/handler-task-definition.json 
  ECS_CONV_TASK_DEFINITION: .aws/conv-task-definition.json 

  HANDLER_CONTAINER_NAME: image-converter-handler
  CONV_CONTAINER_NAME: image-converter-convert

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push handler image to Amazon ECR
      id: build-handler-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_HANDLER_REPOSITORY:$IMAGE_TAG -f Dockerfile.app .
        docker push $ECR_REGISTRY/$ECR_HANDLER_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_HANDLER_REPOSITORY:$IMAGE_TAG"

    - name: Build, tag, and push conv image to Amazon ECR
      id: build-conv-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_CONV_REPOSITORY:$IMAGE_TAG -f Dockerfile.conv .
        docker push $ECR_REGISTRY/$ECR_CONV_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_CONV_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new handler image ID in the Amazon ECS task definition
      id: handler-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_HANDLER_TASK_DEFINITION }}
        container-name: ${{ env.HANDLER_CONTAINER_NAME }}
        image: ${{ steps.build-handler-image.outputs.image }}

    - name: Fill in the new conv image ID in the Amazon ECS task definition
      id: conv-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_CONV_TASK_DEFINITION }}
        container-name: ${{ env.CONV_CONTAINER_NAME }}
        image: ${{ steps.build-conv_image.outputs.image }}

    - name: Deploy Amazon ECS handler task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.handler-task-definition }}
        service: ${{ env.ECS_HANDLER_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deploy Amazon ECS conv task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.conv-task-definition }}
        service: ${{ env.ECS_CONV_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true