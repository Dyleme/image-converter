// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/image-coverter/internal/service (interfaces: ImageProcesser)

// Package mock_service is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/Dyleme/image-coverter/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockImageProcesser is a mock of ImageProcesser interface.
type MockImageProcesser struct {
	ctrl     *gomock.Controller
	recorder *MockImageProcesserMockRecorder
}

// MockImageProcesserMockRecorder is the mock recorder for MockImageProcesser.
type MockImageProcesserMockRecorder struct {
	mock *MockImageProcesser
}

// NewMockImageProcesser creates a new mock instance.
func NewMockImageProcesser(ctrl *gomock.Controller) *MockImageProcesser {
	mock := &MockImageProcesser{ctrl: ctrl}
	mock.recorder = &MockImageProcesserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageProcesser) EXPECT() *MockImageProcesserMockRecorder {
	return m.recorder
}

// ProcessImage mocks base method.
func (m *MockImageProcesser) ProcessImage(arg0 *model.ConversionData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessImage", arg0)
}

// ProcessImage indicates an expected call of ProcessImage.
func (mr *MockImageProcesserMockRecorder) ProcessImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessImage", reflect.TypeOf((*MockImageProcesser)(nil).ProcessImage), arg0)
}
