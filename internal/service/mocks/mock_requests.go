// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/image-coverter/internal/service (interfaces: RequestRepo)

// Package mock_service is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Dyleme/image-coverter/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRequestRepo is a mock of RequestRepo interface.
type MockRequestRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRepoMockRecorder
}

// MockRequestRepoMockRecorder is the mock recorder for MockRequestRepo.
type MockRequestRepoMockRecorder struct {
	mock *MockRequestRepo
}

// NewMockRequestRepo creates a new mock instance.
func NewMockRequestRepo(ctrl *gomock.Controller) *MockRequestRepo {
	mock := &MockRequestRepo{ctrl: ctrl}
	mock.recorder = &MockRequestRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRepo) EXPECT() *MockRequestRepoMockRecorder {
	return m.recorder
}

// AddImageAndRequest mocks base method.
func (m *MockRequestRepo) AddImageAndRequest(arg0 context.Context, arg1 int, arg2 *model.ReuquestImageInfo, arg3 *model.Request) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImageAndRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddImageAndRequest indicates an expected call of AddImageAndRequest.
func (mr *MockRequestRepoMockRecorder) AddImageAndRequest(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImageAndRequest", reflect.TypeOf((*MockRequestRepo)(nil).AddImageAndRequest), arg0, arg1, arg2, arg3)
}

// DeleteRequestAndImage mocks base method.
func (m *MockRequestRepo) DeleteRequestAndImage(arg0 context.Context, arg1, arg2 int) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequestAndImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteRequestAndImage indicates an expected call of DeleteRequestAndImage.
func (mr *MockRequestRepoMockRecorder) DeleteRequestAndImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequestAndImage", reflect.TypeOf((*MockRequestRepo)(nil).DeleteRequestAndImage), arg0, arg1, arg2)
}

// GetRequest mocks base method.
func (m *MockRequestRepo) GetRequest(arg0 context.Context, arg1, arg2 int) (*model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockRequestRepoMockRecorder) GetRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockRequestRepo)(nil).GetRequest), arg0, arg1, arg2)
}

// GetRequests mocks base method.
func (m *MockRequestRepo) GetRequests(arg0 context.Context, arg1 int) ([]model.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", arg0, arg1)
	ret0, _ := ret[0].([]model.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockRequestRepoMockRecorder) GetRequests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockRequestRepo)(nil).GetRequests), arg0, arg1)
}
