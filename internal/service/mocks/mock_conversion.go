// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dyleme/image-coverter/internal/service (interfaces: ConvertRepo)

// Package mock_service is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/Dyleme/image-coverter/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockConvertRepo is a mock of ConvertRepo interface.
type MockConvertRepo struct {
	ctrl     *gomock.Controller
	recorder *MockConvertRepoMockRecorder
}

// MockConvertRepoMockRecorder is the mock recorder for MockConvertRepo.
type MockConvertRepoMockRecorder struct {
	mock *MockConvertRepo
}

// NewMockConvertRepo creates a new mock instance.
func NewMockConvertRepo(ctrl *gomock.Controller) *MockConvertRepo {
	mock := &MockConvertRepo{ctrl: ctrl}
	mock.recorder = &MockConvertRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConvertRepo) EXPECT() *MockConvertRepoMockRecorder {
	return m.recorder
}

// AddProcessedImage mocks base method.
func (m *MockConvertRepo) AddProcessedImage(arg0 context.Context, arg1, arg2 int, arg3 *model.ReuquestImageInfo, arg4, arg5 int, arg6 string, arg7 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessedImage", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProcessedImage indicates an expected call of AddProcessedImage.
func (mr *MockConvertRepoMockRecorder) AddProcessedImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessedImage", reflect.TypeOf((*MockConvertRepo)(nil).AddProcessedImage), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// GetConvInfo mocks base method.
func (m *MockConvertRepo) GetConvInfo(arg0 context.Context, arg1 int) (*model.ConvImageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConvInfo", arg0, arg1)
	ret0, _ := ret[0].(*model.ConvImageInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConvInfo indicates an expected call of GetConvInfo.
func (mr *MockConvertRepoMockRecorder) GetConvInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConvInfo", reflect.TypeOf((*MockConvertRepo)(nil).GetConvInfo), arg0, arg1)
}

// SetImageResolution mocks base method.
func (m *MockConvertRepo) SetImageResolution(arg0 context.Context, arg1, arg2, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImageResolution", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetImageResolution indicates an expected call of SetImageResolution.
func (mr *MockConvertRepoMockRecorder) SetImageResolution(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImageResolution", reflect.TypeOf((*MockConvertRepo)(nil).SetImageResolution), arg0, arg1, arg2, arg3)
}
